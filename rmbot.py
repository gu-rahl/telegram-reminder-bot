# File: rmbot.py
import os
from datetime import datetime
from dateutil.relativedelta import relativedelta
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from reminder_parser import parse_input
from db import ReminderDB

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à Telegram-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–æ—Ä. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:"
        "\nüîπ –Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å"
        "\nüîπ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Ç—è–∂–∫—É"
        "\nüîπ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å",
        parse_mode="Markdown"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    try:
        text, slots, rpt, interval = parse_input(raw)
    except ValueError as e:
        return await update.message.reply_text(str(e))

    db: ReminderDB = context.bot_data['db']
    db.add_reminders(update.effective_chat.id, text, slots, rpt, interval)

    resp = f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ¬´{text}¬ª"
    for dt in slots:
        resp += f"\n  ‚Äì {dt.strftime('%Y-%m-%d %H:%M:%S')}"
    if rpt:
        resp += f"\n(–ø–æ–≤—Ç–æ—Ä: {rpt} –∫–∞–∂–¥—ã–µ {interval})"
    await update.message.reply_text(resp)

async def check_and_send(context: ContextTypes.DEFAULT_TYPE):
    db: ReminderDB = context.bot_data['db']
    due = db.get_due()
    for rid, chat_id, text, remind_at, rpt, interval in due:
        await context.bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
        base = datetime.fromisoformat(remind_at)
        if rpt:
            next_dt = base + relativedelta(**{
                'daily':   {'days': interval},
                'weekly':  {'weeks': interval},
                'monthly': {'months': interval},
                'yearly':  {'years': interval},
                'days':    {'days': interval},
            }[rpt])
            db.update_reminder(rid, next_dt)
        else:
            db.mark_done(rid)

if __name__ == '__main__':
    if not TOKEN:
        print('‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        exit(1)
    db = ReminderDB()
    app = ApplicationBuilder().token(TOKEN).build()
    app.bot_data['db'] = db
    app.job_queue.run_repeating(check_and_send, interval=60, first=10)
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...')
    app.run_polling()
